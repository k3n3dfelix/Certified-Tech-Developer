/*! cpf v2.0.1 | (c) 2015-2019 by Matheus Alves */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["CPF"] = factory();
	else
		root["CPF"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 2);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Format a CPF number.
 *
 * @param {string} cpf Unformatted CPF number.
 * @returns {string} Formatted CPF number.
 */
module.exports = function (cpfNumber) {
  if (typeof cpfNumber !== 'string') {
    throw new Error('Invalid CPF number');
  }

  var unformattedCpf = cpfNumber.replace(/\D/g, '');

  if (unformattedCpf.length !== 11) {
    throw new Error('Invalid CPF number');
  }

  var regex = /^(\d{3})(\d{3})(\d{3})(\d{2})$/;
  var mask = '$1.$2.$3-$4';

  return unformattedCpf.replace(regex, mask);
};

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var reverseArray = __webpack_require__(5);

/**
 * Check if a value is a digit.
 *
 * @param {any} val Any value.
 * @return {boolean} Check result.
 */
var isDigit = function isDigit(val) {
  return (/^\d$/.test(val)
  );
};

/**
 * Sum two any numbers.
 *
 * @param {number} a Number to sum.
 * @param {number} b Other number to sum.
 * @return {number} Sum result.
 */
var sum = function sum(a, b) {
  return a + b;
};

/**
 * Do a internal calculation of the CPF algorithm.
 *
 * @param {Array} nums Array of numbers.
 * @returns {number} Operation result.
 */
var calc = function calc(nums) {
  return nums.map(function (num, i) {
    return num * (9 - i % 10);
  }).reduce(sum);
};

/**
 * Get the check digits of a CPF number.
 *
 * @param {Array} digits Nine digits of a CPF number.
 * @returns {Array} Check digits.
 */
module.exports = function () {
  var digits = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  var arrayDigits = Array.from(digits || []);

  if (!arrayDigits.every(isDigit) || digits.length !== 9) {
    throw new Error('Invalid digits');
  }

  var reversed = reverseArray(arrayDigits);
  var cd = [];

  cd[0] = calc(reversed) % 11 % 10;
  cd[1] = (calc([0].concat(_toConsumableArray(reversed))) + cd[0] * 9) % 11 % 10;

  return cd;
};

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports.format = __webpack_require__(0);

module.exports.generate = __webpack_require__(3);

module.exports.isValid = __webpack_require__(6);

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var randomArray = __webpack_require__(4);
var getCd = __webpack_require__(1);
var format = __webpack_require__(0);

/**
 * Generate a random CPF number.
 *
 * @param {boolean} [formatted=true] To get a formatted number.
 * @param {boolean} [invalid=false] To get invalid number.
 * @returns {string} CPF number.
 */
module.exports = function () {
  var formatted = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
  var invalid = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  var digits = randomArray(0, 9).oned(9, { round: true });

  var dv = invalid ? randomArray(0, 9).oned(2, { round: true }) : getCd(digits);

  var cpfNumber = [].concat(_toConsumableArray(digits), _toConsumableArray(dv)).join('');

  return formatted ? format(cpfNumber) : cpfNumber;
};

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var genRandomArray = function genRandomArray(length, minvalue, maxvalue, options) {
    var opt = options || {};
    var round = opt.round;
    return Array.apply(null, { length: length }).map(function () {
        var result = Math.random() * (maxvalue - minvalue) + minvalue;
        if (round === true) {
            return Math.round(result);
        }
        return result;
    });
};

module.exports = function (minvalue, maxvalue) {
    return {
        oned: function oned(length, options) {
            return genRandomArray(length, minvalue, maxvalue, options);
        },

        twod: function twod(width, height, options) {
            return Array.apply(null, { length: width }).map(function () {
                return genRandomArray(height, minvalue, maxvalue, options);
            });
        },

        genWhile: function genWhile(func, options) {
            var result = [];
            var opt = options || {};
            var limit = opt.limit || 10000;
            var c = 0;
            while (c !== limit) {
                var item = Math.random() * (maxvalue - minvalue) + minvalue;
                result.push(item);
                if (func(item)) {
                    return result;
                }
                c += 1;
            }
            return result;
        }
    };
};

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (input) {
	if (!Array.isArray(input)) {
		throw new TypeError('Expected an array');
	}
	return input.reverse();
};

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var getCd = __webpack_require__(1);

/**
 * Check if a string has only the same character.
 *
 * @param {string} string String to check.
 * @returns {boolean} Check result.
 */
var isRepeated = function isRepeated(string) {
  var firstChar = string.charAt(0);
  var regex = RegExp('^' + firstChar + '+$');

  return regex.test(string);
};

/**
 * Check if a number is a CPF valid.
 *
 * @param {string} cpfNumber CPF number.
 * @param {boolean} byLength To check only by the length.
 * @returns {boolean} Check result.
 */
module.exports = function (cpfNumber) {
  var byLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  if (typeof cpfNumber !== 'string') return false;

  var unformattedCpf = cpfNumber.replace(/\D/g, '');

  if (!unformattedCpf) return false;
  if (isRepeated(unformattedCpf)) return false;
  if (unformattedCpf.length !== 11) return false;
  if (byLength && unformattedCpf.length === 11) return true;

  var _unformattedCpf$match = unformattedCpf.match(/^(\d{9})(\d{2})$/),
      _unformattedCpf$match2 = _slicedToArray(_unformattedCpf$match, 3),
      number = _unformattedCpf$match2[1],
      dv = _unformattedCpf$match2[2];

  var trueDv = getCd(number).join('');

  return dv === trueDv;
};

/***/ })
/******/ ]);
});